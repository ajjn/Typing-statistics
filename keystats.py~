import tkinter as tk
import time
import matplotlib.pyplot as plt
import numpy as np

class KeyStats(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Key stats")
        row = 0
        tk.Label(self,
                 text="""Click button to start and Enter to stop 
                 recording""").grid(row=row,
                                    columnspan=2,
                                    padx=10,
                                    pady=10)
        self.status_text = tk.Label(self,
                                    foreground="red",
                                    text="")
        row += 1
        self.status_text.grid(row=row,
                             columnspan=2,
                             padx=10,
                             pady=10)

        self.stats_text = tk.Label(self,
                              text="")
        row += 1
        self.stats_text.grid(row=row,
                             columnspan=2,
                             padx=10,
                             pady=10)

        row += 1
        tk.Button(self,
                  text="Start recording",
                  command=self.toggle_status).grid(row=row,
                                                   column=0,
                                                   padx=10,
                                                   pady=10)
        tk.Button(self,
                  text="Start simulation",
                  command=self.simulate).grid(row=row,
                                              column=1,
                                              padx=10,
                                              pady=10)

        self.textbox = tk.Text(self)
        row += 1
        self.textbox.grid(row=row,
                          columnspan=2,
                          padx=10,
                          pady=10)
        
        
        self.bind("<Key>", self.key)
        self.times = []
        self.text = ""
        self.status = False
        self.after(500, self.update_status)

    def update_status(self):
        if self.status:
            if self.status_text['text'] == 'Recording':
                self.status_text['text'] =''
            else: self.status_text['text'] = 'Recording'
        else:
            self.status_text['text'] =''
        
        self.update()
        self.after(500, self.update_status)
        
    def initialize(self):
        self.textbox.delete(1.0, tk.END)
        self.text = ""
        self.times = []

    def toggle_status(self):
        self.status = not self.status
        if not self.status:
            self.plot_summary()
        else:
            print("Started recording")
            self.initialize()
            self.textbox.focus_set()
            
    def plot_summary(self):
        if len(self.times) < 2:
            self.times = []
            print("Press keys at least twice")
            return
        self.times = np.array(self.times)
        deltas = self.times[1:] - self.times[:-1] 
        print("Mean key press interval: {}".format(np.mean(deltas)))
        print("Standard deviation of key press interval: {}".format(np.std(deltas)))
        orig_mu = np.mean(deltas)
        orig_sigma = np.std(deltas)
        deltas = np.log(deltas)
        mu = np.mean(deltas)
        sigma = np.std(deltas)
        print("You typed {} characters.".format(len(deltas)+1))
        print("Mean of log of key press interval: {}".format(mu))
        print("Standard deviation of log of key press interval: {}".format(sigma))
        bins = int(len(deltas)/10)
        n, bins, patches = plt.hist(np.exp(deltas), normed=1,
                                    facecolor='green', alpha=0.75)
        l = plt.plot(bins, self.lognorm_pdf(bins, mu, sigma), 'r--', linewidth=1)
        plt.xlabel('Key press interval [s]')


        plt.ylabel('Normalized frequency')
        plt.title("""Key press interval stats: 
        mean = {:.2f} s, std = {:.2f} s""".format(orig_mu,
                                                  orig_sigma))
        #plt.axis([40, 160, 0, 0.03])
        plt.grid(True)

        # Calculate char-wise stats
        
        plt.show()

    def lognorm_pdf(self, x, mu, sigma):
        y = 1/(x*sigma*np.sqrt(2*np.pi))*np.exp(-(np.log(x)-mu)**2/(2*sigma**2))
        return y
    
    def update_stats_text(self):
        if len(self.times) < 2:
            return
        times = np.array(self.times)
        deltas = times[1:] - times[:-1] 
        orig_mu = np.mean(deltas)
        orig_sigma = np.std(deltas)
        self.stats_text['text'] = """Chars: {:d}, 
        Mean: {:d} ms, Std: {:d} ms""".format(len(self.times),
                                              int(1000 * orig_mu),
                                              int(1000 * orig_sigma))

    def simulate(self):
        times = np.array(self.times)
        deltas = times[1:] - times[:-1]
        deltas = np.log(deltas)
        mu = np.mean(deltas)
        sigma = np.std(deltas)
        intervals = np.exp(sigma * np.random.randn( len(self.text)-1) + mu)
        self.textbox.delete(1.0, tk.END)
        self.textbox.insert(tk.END, self.text[0])
        self.update()
        for i in range(len(intervals)):
            time.sleep(intervals[i])
            # Backspace
            if self.text[i+1] == chr(8):
                self.textbox.delete('%s-2c' % tk.END, tk.END)
            else:
                self.textbox.insert(tk.END, self.text[i+1])
            self.update()

    def key(self, event):
        if event.char == '\r':
            self.toggle_status()
        elif self.status:
            self.record(event.char)
            
    def record(self, key):
        self.times.append(time.time())
        self.text += key
        self.update_stats_text()

class Char:
    def __init__(symbol, interval):
        self.intervals = [interval]
        self.symbol = symbol

    def get_symbol(self):
        return self.symbol

    def get_intervals(self):
        return self.intervals
    
    def add_interval(self, interval):
        self.intervals.append(interval)
        
app = KeyStats()
app.mainloop()
